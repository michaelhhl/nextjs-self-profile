[
    {
      "question": "リクエストと応答の調和",
      "solution": "1.返されたエンティティオブジェクトResponseEntity:code,message,dataを定義。!@#2.@ControllerAdvice implements ResponseBodyAdviceを使用。!@#3.環境が開発されると、元のデータオブジェクトが返され、統合されると、ゲートウェイを通過してマークされ、ResponseEntityが返される。!@#4.ExceptionHandlerクラスを定義し、@RestControllerAdviceを使用してあらゆる種類の例外をインターセプト(例外を均一に処理)。!@#5.@ExceptionHandler(value=CommonException) メソッドで、例外情報とコードを取得し、ResponseEntity にカプセル化。"
    },
    {
      "question": "適応的リクエスト制限",
      "solution": "一般的な方法: トークン、漏洩バケット、カウンター。!@#一般的な方法の問題点： 負荷状況や機械の性能に応じて流量を自動調整することはできない。!@#適応型リクエスト制限:!@#1.指数加重平均アルゴリズムを使用して、データをより滑らかにし、瞬間的な大きなトラフィックの影響を受けないようにする。 cpu = cpu(t-1) * decay + cpu(t) * (1 - decay)。!@#2. スライディングウィンドウでデータを収集 リンクリスト(長さ100)を使用して、100ミリ秒ごとに流量を保存。"
    },
    {
      "question": "マルチスレッドの不適切な使用",
      "solution": "1.Spring の 2 つのサービスが同じビジネス サービスを呼び出し、スレッド A がスレッド B のログに表示される。 修正:共通サービスのスコープをプロトタイプに変更。!@#2.マルチスレッドの条件下では、静的変数を使用してデータを保存し、スレッドAによって保存された値はスレッドBによって変更される。 解決済み: 変数を保存するために、静的変数を Threadlocal に変更。!@#3.複数のスレッドでアカウントチケットを印刷場合、各スレッドで印刷されるアカウントの数が部門のアカウント数に応じて一貫していません。 スレッドが 20,000 個のメッセージを出力すると、メモリ不足が表示される。 pdfboxソフトウェア印刷。 directMemory のサイズは 1G に制限されている。 20,000個のデータを2,000個にページ分割し、一度印刷。"
    },
    {
      "question": "シェルの使用に関する問題",
      "solution": "1.サービスがブロックされ、取得結果がないため、誤ってスイッチオーバーが発生。!@#2.シェル内の文字列変数の格納長が範囲外だ。!@#3.シェルのメインスレッドを早期に終了させることができず、そうしないとサブスレッドの実行結果が得られない。"
    },
    {
      "question": "Springでリクエストコンテキストを使う",
      "solution": "1.カスタムクラス MyContextHolder.java で静的メソッドを定義。!@#2.RequestContextHolder.getRequestAttributes() から属性を取得。!@#3.attributes.getRequest().getHeader()から属性を取得。"
    },
    {
      "question": "国際化",
      "solution": "1.@Configurationを使用して、LocalValidatorFactoryBeanのgetValidator(final ResourceBoundleMessageSource)メソッドをインスタンス化@Bean。!@#2.messageSource.addBasenames('i18n/CommonMessages') を追加。!@#3.FactoryBean.addValidationMessageSource (messageSource) を設定。!@#4.Autoware がコントローラまたはサービスに messageSource を挿入。"
    },
    {
      "question": "リクエストトレース-Gateway",
      "solution": "新しいクラスTraceGlobalFilter implements GlobalFilterを新築:!@#1.スノーフレーク アルゴリズムは、traceIdとspanId を生成。!@#2.traceIdとspanIdをリクエストヘッダーに入れる。!@#新しいAuthGlobalFilter implements GlobalFilterを創造：!@#1.ヘッダーから traceId を取り出し、restTemplate に入れる"
    },
    {
      "question": "リクエストトレース-Service",
      "solution": "新しいTraceInterceptor extends HandlerInterceptorAdapter:!@#1.preHandle() は、リクエストから traceId を取り出し、spanId を生成して、それを mdc と threadlocal でカウント。!@#2.afterCompletion()は、mdcとthreadlocalのデータをクリア。!@#新しいHeaderRequestInterceptor implements Feign.RequestInterceptor：!@#1.要求(MQまたはタイマーによって開始される)にtraceId がない場合は、新しいtraceIdを作成し、ヘッダーに配置。"
    },
    {
      "question": "リクエストトレース-RocketMQ",
      "solution": "1.ZdyRocketMQAutoConfiguration,import ZdyMessageConverterConfiguration, ZdyListenerContainerConfigurationをカスタマイズ。!@#2.ZdyAutoConfigurationImportFilter implements AutoConfigurationImportFilter。 RocketMQのオリジナルのカスタムautoconfigurationを削除。!@#3.ZdyDefaultMQProducer extends TransactionMQProducerをカスタマイズ。コンテキストホルダーから traceId を取得し、メッセージのタグに入れる。!@#4.ZdyDefaultRocketMQListenerContainerで、messageのターグからtraceIdを取り出し、requestHolderとmdcに配置。"
    },
    {
      "question": "ステートマシン・パターンを使用したシンプルなワークフローのカプセル化",
      "solution": "1.Context、Action、Stateクラスを定義。ContextはActionとStateをカプセル化し、ActionとStateは列挙によって定義される。!@#2.コンテキストに初期状態(State)とその状態で実行するアクション(Action)を与える。!@#3.アクションは、アクション実行時のユーザー権限を判断できる。!@#4.状態はロジックに従って次の状態に変化し、コンテキストに戻る。"
    },
    {
      "question": "単体リクエストリミッターの実装",
      "solution": "1.HandlerInterceptorインターフェイスを実装して、リクエストをインターセプトし、フローリミッタークラスをインジェクト。!@#2.リミッターで、GuavaのCacheBuilderを使ってキャッシュ・カウンターを作成。!@#3.ユーザー名とURLに基づいて、カウンターのしきい値を超えているかどうかを判断。"
    },
    {
      "question": "データベースパスワードの暗号化/復号化",
      "solution": "1.Application.ymlでspring.datasource.passwordに暗号化されたデータベースパスワードを指定。!@#2.EnvironmentPostProcessorインタフェースのpostProcessEnvironmentメソッドを実装。!@#3.暗号化されたパスワードをConfigurableEnvironmentから取得し、復号化してspring.datasource.passwordに再割り当て。!@#4.spring.factories に EnvironmentPostProcessor インターフェースの実装クラスを追加。"
    },
    {
      "question": "YAMLから設定を自動的に読み込む",
      "solution": "1.カスタムクラスはDefaultPropertySourceFactoryを継承。!@#2.createPropertySource メソッドを実装し、新しく作成された YamlPropertySourceLoader クラスを返す。!@#3.アノテーション@PropertySourceと@ConfigurationPropertiesでPerpertyクラスをカスタマイズし、yamlファイルのパスと名前、プレフィックスを示す。!@#4.他のクラスでは、Perpertyクラスを注入することができる。"
    },
    {
      "question": "SpringSecurity+JWTを使って認証認可設定を実現",
      "solution": "1.カスタム設定クラスは、@Configurationアノテーションを使用。!@#2.SecurityFilterChainオブジェクトを返すfilterchainメソッドを定義。!@#3.ステートレス・セッションとデフォルトのコアを設定。!@#4.formLoginの成功ハンドラーと失敗ハンドラーを設定。!@#5.authorizeRequestsを設定し、認証されたリクエストパス、静的リソースパスなどを設定。!@#6.カスタムjwtコンバータをセットアップするために、oauth2ResourceServerを設定。!@#7.例外ハンドラexceptionHandlingを設定。!@#8.ログアウトを設定。!@#9.ユーザーログインを完了するためのUserDetailsServiceインターフェイスを実装するカスタムクラス。"
    },
    {
      "question": "producer/consumerパターンのスタンドアロン実装",
      "solution": "1.マネージャー、ワーカー、タスクの3つのクラスで構成される。!@#2.Managerクラスは、LinkedBlockingQueueに格納されたマルチタスクの受信を担当。!@#3.WorkerクラスはThreadを継承し、LinkedBlockingQueueからタスクを取得して完了させる役割を担う。!@#4.タスククラスは、タスクを達成するための特別なクラスだ。"
    }
]
